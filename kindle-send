#!/usr/bin/python
import argparse
import os
from config import prefix, store_path, receiver
import requests
import subprocess
from selectolax.parser import HTMLParser
from utils.linkExtractor import linkExtractor
from utils.bundler import bundler
from utils.mailer import sendMail



def convert_to_mobi(title):
    print("STEP 2 : Converting to mobi")
    new_title = title[:-4]+"mobi"
    subprocess.call(["ebook-convert", store_path+title, store_path+new_title])
    print("STEP 3 : Removing epub")
    subprocess.call(["rm", store_path+title])

def add_metadata(title):
    TITLE = prefix+" "+title[:-5]
    subprocess.call(["ebook-meta", store_path+title, f"--title={TITLE}"])
    subprocess.call(["ebook-meta", store_path+title, "--category=News"])
    subprocess.call(["ebook-meta", store_path+title, "--tags=News"])


def get_page_title(url):
    page = requests.get(url);
    title = HTMLParser(page.text).css_first('title')
    title = title.text().strip()
    return title




parser = argparse.ArgumentParser()
parser.add_argument("--receiver", help="e-mail of receiver", dest = 'receiver', default=receiver)

parser.add_argument("--file", help="file to send", dest = 'file')

parser.add_argument("--link", help="link to a webpage", dest = 'link')

parser.add_argument("--link-file", help="""text file with links in a newline,
        links will be combined in a single file named as the --title (if provided),
        If no title given, file will be named as the title of first link
        """, dest = 'linkFile')

parser.add_argument("--title", help="Title for the document", dest = 'title')



args = parser.parse_args()

if args.receiver:
    receiver = args.receiver

if args.file:
    file_path = args.file
    sendMail(receiver, file_path)
    exit()


if args.link:
    if args.title:
        title = args.title+".epub"
    else:
        title = get_page_title(args.link)
        title = title.strip()
        title = title+".epub"
    url = args.link
    subprocess.call(["percollate", "epub", url, "-o", store_path+title])
    convert_to_mobi(title)
    title = title[:-4]+"mobi"
    add_metadata(title)
    file_path = store_path+title
    sendMail(receiver, file_path)
    exit()




if args.linkFile:
    urls = linkExtractor(args.linkFile)
    if len(urls)==0:
        print("NO VALID URLS IN FILE")
        exit
    if not args.title:
        title = get_page_title(url[0]);
        print("No title provided , Giving title : {} to the collection".format(title))
    else:
        title = args.title

    title = title+".epub"
    #urls downloaded and stored in title.epub
    bundler(urls, title)
    convert_to_mobi(title)
    title = title[:-4]+"mobi"
    add_metadata(title)
    file_path = store_path+title
    sendMail(receiver, file_path)
    exit()


if not args.link and not args.file:
    print("No file or link provided")
    exit()

